name: Example Mod Development Actions

on:
  push:
    branches:
      - develop
    tags-ignore:
      - dev-versioning
      - prod-versioning
    paths-ignore:
      - 'config.json'

jobs:
  setup-and-build-develop-branch:
    runs-on: ubuntu-22.04
    steps:
      # Copy all files to the working dir
      - name: Set up files
        uses: actions/checkout@v3

      # Set up node and cache it to save time
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      # Cache the node_modules folder to avoid having to download it everytime
      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ github.ref_name }}-modules-${{ hashFiles('yarn.lock') }}

      # If the node_modules folder changed or doesnt exist, run the install command
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      # Run the version module to update the version number
      # Commit the changes and push them to the branch
      - name: Update Versioning
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

          node version.mjs develop

          git add -A
          git tag dev-versioning
          git commit -m 'Update Version'
          git push

      # Build stage
      - name: Build
        run: npm run build

      # Copy the manifest file into the build folder so it can be zipped
      - name: Copy Manifest.json
        run: cp manifest.json ./.build/

      # Zip the build file
      - name: Zip mod folder
        run: zip -r ./.build/${{ github.event.repository.name }}.zip ./.build/

      # Upload the zip file as an artifact so it can be used in a later job
      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.ref_name }}-${{ github.event.repository.name }}ZipFile
          path: ./.build/${{ github.event.repository.name }}.zip

  upload-develop-branch:
    needs: setup-and-build-develop-branch
    runs-on: ubuntu-22.04
    steps:
      # Copy all files to the working dir
      - name: Set up files
        uses: actions/checkout@v3

      # Pull the new version number
      - name: Pull New Commit
        run: git pull

      # Download the zip file that was uploaded in the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.ref_name }}-${{ github.event.repository.name }}ZipFile

      # Pull config data from config.json to be used in the upload to mod.io
      # This gets the 'active' variable from the develop section of config.json
      - name: Extract config data
        id: config
        run: |
          game_id=$(jq '.game' config.json)
          mod_id=$(jq '.mod' config.json)
          version=$(jq -r '.version' config.json)
          active=$(jq -r '.develop.active' config.json)
          type=$(echo jq -r '.tags.type' config.json)

          echo "game=${game_id}" >> $GITHUB_OUTPUT
          echo "mod=${mod_id}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "active=${active}" >> $GITHUB_OUTPUT
          echo "type=${type}" >> $GITHUB_OUTPUT

      # Use a custom action to upload the zip file to mod.io using variables from config.json
      - name: Upload to mod.io
        uses: nickelc/upload-to-modio@v2.0.0
        with:
          token: ${{ secrets.MODIO_TOKEN }}
          game: ${{ steps.config.outputs.game }}
          mod: ${{ steps.config.outputs.mod }}
          version: ${{ steps.config.outputs.version }}
          path: ./${{ github.event.repository.name }}.zip
          active: ${{ steps.config.outputs.active }}
